// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ming-0x0/hexago/shared/repository (interfaces: RepositoryInterface)
//
// Generated by this command:
//
//	mockgen -destination mock/repository.go -package mock github.com/ming-0x0/hexago/shared/repository RepositoryInterface
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	repository "github.com/ming-0x0/hexago/shared/repository"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface[A repository.AdapterInterface[D, E], D any, E any] struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder[A, D, E]
	isgomock struct{}
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder[A repository.AdapterInterface[D, E], D any, E any] struct {
	mock *MockRepositoryInterface[A, D, E]
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface[A repository.AdapterInterface[D, E], D any, E any](ctrl *gomock.Controller) *MockRepositoryInterface[A, D, E] {
	mock := &MockRepositoryInterface[A, D, E]{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder[A, D, E]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface[A, D, E]) EXPECT() *MockRepositoryInterfaceMockRecorder[A, D, E] {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepositoryInterface[A, D, E]) Create(ctx context.Context, domain *D) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, domain)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryInterfaceMockRecorder[A, D, E]) Create(ctx, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepositoryInterface[A, D, E])(nil).Create), ctx, domain)
}

// DeleteByConditions mocks base method.
func (m *MockRepositoryInterface[A, D, E]) DeleteByConditions(ctx context.Context, conditions map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByConditions", ctx, conditions)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByConditions indicates an expected call of DeleteByConditions.
func (mr *MockRepositoryInterfaceMockRecorder[A, D, E]) DeleteByConditions(ctx, conditions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByConditions", reflect.TypeOf((*MockRepositoryInterface[A, D, E])(nil).DeleteByConditions), ctx, conditions)
}

// FindByConditions mocks base method.
func (m *MockRepositoryInterface[A, D, E]) FindByConditions(ctx context.Context, conditions map[string]any, scopes ...func(*gorm.DB) *gorm.DB) ([]*D, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, conditions}
	for _, a := range scopes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByConditions", varargs...)
	ret0, _ := ret[0].([]*D)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByConditions indicates an expected call of FindByConditions.
func (mr *MockRepositoryInterfaceMockRecorder[A, D, E]) FindByConditions(ctx, conditions any, scopes ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, conditions}, scopes...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByConditions", reflect.TypeOf((*MockRepositoryInterface[A, D, E])(nil).FindByConditions), varargs...)
}

// FindByConditionsWithPagination mocks base method.
func (m *MockRepositoryInterface[A, D, E]) FindByConditionsWithPagination(ctx context.Context, pageData map[string]int, conditions map[string]any, scopes ...func(*gorm.DB) *gorm.DB) ([]*D, int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, pageData, conditions}
	for _, a := range scopes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindByConditionsWithPagination", varargs...)
	ret0, _ := ret[0].([]*D)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindByConditionsWithPagination indicates an expected call of FindByConditionsWithPagination.
func (mr *MockRepositoryInterfaceMockRecorder[A, D, E]) FindByConditionsWithPagination(ctx, pageData, conditions any, scopes ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, pageData, conditions}, scopes...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByConditionsWithPagination", reflect.TypeOf((*MockRepositoryInterface[A, D, E])(nil).FindByConditionsWithPagination), varargs...)
}

// Save mocks base method.
func (m *MockRepositoryInterface[A, D, E]) Save(ctx context.Context, domain *D) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, domain)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockRepositoryInterfaceMockRecorder[A, D, E]) Save(ctx, domain any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockRepositoryInterface[A, D, E])(nil).Save), ctx, domain)
}

// TakeByConditions mocks base method.
func (m *MockRepositoryInterface[A, D, E]) TakeByConditions(ctx context.Context, conditions map[string]any, scopes ...func(*gorm.DB) *gorm.DB) (*D, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, conditions}
	for _, a := range scopes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TakeByConditions", varargs...)
	ret0, _ := ret[0].(*D)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TakeByConditions indicates an expected call of TakeByConditions.
func (mr *MockRepositoryInterfaceMockRecorder[A, D, E]) TakeByConditions(ctx, conditions any, scopes ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, conditions}, scopes...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TakeByConditions", reflect.TypeOf((*MockRepositoryInterface[A, D, E])(nil).TakeByConditions), varargs...)
}
